[debug] Created tunnel using local port: '63750'

[debug] SERVER: "127.0.0.1:63750"

[debug] Original chart version: ""
[debug] Fetched stable/postgresql to /Users/mariana/.helm/cache/archive/postgresql-3.6.0.tgz

[debug] CHART PATH: /Users/mariana/.helm/cache/archive/postgresql-3.6.0.tgz

NAME:   washed-rodent
REVISION: 1
RELEASED: Wed Dec 26 14:07:28 2018
CHART: postgresql-3.6.0
USER-SUPPLIED VALUES:
image:
  tag: 9.6.11
initdbScripts:
  db-init.sql: |-
    CREATE ROLE nuxeo WITH PASSWORD 'nuxeo' LOGIN;
    CREATE DATABASE vctests ENCODING 'UTF8' OWNER nuxeo;

COMPUTED VALUES:
extraEnv: {}
image:
  debug: false
  pullPolicy: Always
  registry: docker.io
  repository: bitnami/postgresql
  tag: 9.6.11
initdbScripts:
  db-init.sql: |-
    CREATE ROLE nuxeo WITH PASSWORD 'nuxeo' LOGIN;
    CREATE DATABASE vctests ENCODING 'UTF8' OWNER nuxeo;
livenessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
master:
  affinity: {}
  nodeSelector: {}
  tolerations: []
metrics:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: wrouesnel/postgres_exporter
    tag: v0.4.6
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  service:
    annotations:
      prometheus.io/port: "9187"
      prometheus.io/scrape: "true"
    loadBalancerIP: null
    type: ClusterIP
networkPolicy:
  allowExternal: true
  enabled: false
persistence:
  accessModes:
  - ReadWriteOnce
  annotations: {}
  enabled: true
  mountPath: /bitnami/postgresql
  size: 8Gi
postgresqlUsername: postgres
readinessProbe:
  enabled: true
  failureThreshold: 6
  initialDelaySeconds: 5
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
replication:
  enabled: false
  password: repl_password
  slaveReplicas: 1
  user: repl_user
resources:
  requests:
    cpu: 250m
    memory: 256Mi
securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
service:
  annotations: {}
  port: 5432
  type: ClusterIP
slave:
  affinity: {}
  nodeSelector: {}
  tolerations: []
updateStrategy:
  type: RollingUpdate
volumePermissions:
  enabled: true
  image:
    pullPolicy: Always
    registry: docker.io
    repository: bitnami/minideb
    tag: latest
  securityContext:
    runAsUser: 0

HOOKS:
MANIFEST:

---
# Source: postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: washed-rodent-postgresql
  labels:
    app: postgresql
    chart: postgresql-3.6.0
    release: "washed-rodent"
    heritage: "Tiller"
type: Opaque
data:
  postgresql-password: "OWZJSTVmbk1nMA=="
---
# Source: postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: washed-rodent-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-3.6.0
    release: "washed-rodent"
    heritage: "Tiller"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "washed-rodent"
---
# Source: postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: washed-rodent-postgresql
  labels:
    app: postgresql
    chart: postgresql-3.6.0
    release: "washed-rodent"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port:  5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "washed-rodent"
    role: master
---
# Source: postgresql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: washed-rodent-postgresql
  labels:
    app: postgresql
    chart: postgresql-3.6.0
    release: "washed-rodent"
    heritage: "Tiller"
spec:
  serviceName: washed-rodent-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "washed-rodent"
      role: master
  template:
    metadata:
      name: washed-rodent-postgresql
      labels:
        app: postgresql
        chart: postgresql-3.6.0
        release: "washed-rodent"
        heritage: "Tiller"
        role: master
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      initContainers:
      - name: init-chmod-data
        image: docker.io/bitnami/minideb:latest
        imagePullPolicy: "Always"
        command:
          - sh
          - -c
          - |
            chown -R 1001:1001 /bitnami
            if [ -d /bitnami/postgresql/data ]; then
              chmod  0700 /bitnami/postgresql/data;
            fi
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
      containers:
      - name: washed-rodent-postgresql
        image: docker.io/bitnami/postgresql:9.6.11
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          
        env:
        - name: POSTGRESQL_USERNAME
          value: "postgres"
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: washed-rodent-postgresql
              key: postgresql-password
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "postgres" --host $POD_IP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "postgres" --host $POD_IP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
